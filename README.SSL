Additions and original work (c) Ray Hunter 2020-2024

This is a new feature branch to combine 3 separate projects.
The "Holy Grail" is an example multi-threaded libevent server over openssl.

The 3 projects used as source are:

1) an example multi-threaded libevent server that provides 
an echo service on multiple clients in parallel with multiple threads.

The original libevent multi-threaded server can be found here:
https://github.com/paranlee/multithread-libevent-echo-server

/**
 * Multithreaded, libevent-based socket server.
 * Copyright (c) 2012-2015 Ronald Bennett Cemer
 * This software is licensed under the BSD license.
 * See the accompanying LICENSE.txt for details.
 *
 *  Maintained by 
 *      Paran Lee  <p4ranlee@gamil.com>
 *
 *  To compile: 
 *      gcc -o server.o server.c workqueue.c -levent -lpthread
 *  To run: 
 *      ./server.o
 */


2) an example openssl server that provides 2-way communication on one client

The original openssl example can be found here:
https://github.com/darrenjs/openssl_examples

MIT License

Copyright (c) 2017 Darren Smith

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

3) My own experimental code for a DNS Distribution Master in support of RFC9526
The original code for this project can be found here:
https://github.com/v6ops/homenet_hna


The combined code can be found here:

https://github.com/v6ops/multithread-libevent-echo-server/tree/WithSSL

All effort has been made to keep original code intact (so it can be patched)
and to credit original authors as appropriate in the combined code.


Compilation
-----------

To compile the program, use something like:

```console
    gcc server-ssl.c -Wall -O0 -g3 -o server-ssl workqueue.c -levent -lpthread -lssl -l crypto

```

Or just try the makefile, for Linux platforms.

On Ubuntu systems you may need to run `sudo apt install libssl-dev` to install OpenSSL headers.

Running
-------

Running the program requires that a SSL certificate and private key are
available to be loaded. These can be generated using the 'openssl' program using
these steps:

1. Generate the private key, this is what we normally keep secret:
```console
    openssl genrsa -des3 -passout pass:ABCD -out server.pass.key 2048
    openssl rsa -passin pass:ABCD -in server.pass.key -out server.key
    rm -f server.pass.key
```
2. Next generate the CSR.  We can leave the password empty when prompted
   (because this is self-sign):
```console
    openssl req -new -key server.key -out server.csr
```
3. Next generate the self signed certificate:
```console
    openssl x509 -req -sha256 -days 365 -in server.csr -signkey server.key -out server.crt
    rm -f server.csr
```
The openssl program can also be used to connect to this program as an SSL
client. Here's an example command (assuming we're using port 55555):
```console
    openssl s_client -connect 127.0.0.1:8080 -msg -debug -state -showcerts
```

Flow of encrypted & unencrypted bytes
-------------------------------------

This diagram shows how the read and write memory BIO's (rbio & wbio) are
associated with the socket read and write respectively.  On the inbound flow
(data into the program) bytes are read from the socket and copied into the rbio
via BIO_write.  This represents the the transfer of encrypted data into the SSL
object. The unencrypted data is then obtained through calling SSL_read.  The
reverse happens on the outbound flow to convey unencrypted user data into a
socket write of encrypted data.

```
 +------+                                   +-----+
 |......|--> read(fd) --> BIO_write(rbio)-->|.....|-->SSL_read(ssl) -->WORK IN
 |......|                                   |.....|
 |.sock.|                                   |.SSL.|
 |......|                                   |.....|
 |......|<-- write(fd) <-- BIO_read(wbio)<--|.....|<--SSL_write(ssl)<--WORK OUT
 +------+                                   +-----+

        |                                   |     |                     |
        |<--------------------------------->|     |<------------------->|
        |         encrypted bytes           |     |  unencrypted bytes  |
```
